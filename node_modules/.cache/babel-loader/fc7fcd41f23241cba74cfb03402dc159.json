{"ast":null,"code":"import _slicedToArray from \"/Users/msalmukhtar/Desktop/PokemonReactApp/pokemon/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/msalmukhtar/Desktop/PokemonReactApp/pokemon/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport PokemonList from './PokemonList';\nimport axios from 'axios';\n\nfunction App() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        pokemon = _useState2[0],\n        setPokemon = _useState2[1];\n\n  const _useState3 = useState('https://pokeapi.co/api/v2/pokemon'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        currentPageUrl = _useState4[0],\n        setCurrentPageUrl = _useState4[1];\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        nextPageUrl = _useState6[0],\n        setNextPageUrl = _useState6[1];\n\n  const _useState7 = useState(),\n        _useState8 = _slicedToArray(_useState7, 2),\n        prevPageUrl = _useState8[0],\n        setPrevPageUrl = _useState8[1];\n\n  const _useState9 = useState(true),\n        _useState10 = _slicedToArray(_useState9, 2),\n        loading = _useState10[0],\n        setLoading = _useState10[1];\n\n  useEffect(() => {\n    setLoading(true);\n    let cancel;\n    axios.get(currentPageUrl, {\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n      setLoading(false);\n      setNextPageUrl(res.data.next);\n      setPrevPageUrl(res.data.previous);\n      setPokemon(res.data.results.map(p => p.name));\n    });\n    return () => {\n      cancel();\n    };\n  }, [currentPageUrl]); //by using the useEffect hook, we tell React to re-run the code inside the function only when the second parameter changes. in our case the currentPageUrl value. You can use an Array for hose values if you wish to rerun based on more than one value.  \n\n  function gotoNextPage() {\n    setCurrentPageUrl(nextPageUrl);\n  }\n\n  function gotoPrevPage() {\n    setCurrentPageUrl(prevPageUrl);\n  }\n\n  if (loading) return 'Loading...';\n  return React.createElement(PokemonList, {\n    pokemon: pokemon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  });\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/msalmukhtar/Desktop/PokemonReactApp/pokemon/src/App.js"],"names":["React","useState","useEffect","PokemonList","axios","App","pokemon","setPokemon","currentPageUrl","setCurrentPageUrl","nextPageUrl","setNextPageUrl","prevPageUrl","setPrevPageUrl","loading","setLoading","cancel","get","cancelToken","CancelToken","c","then","res","data","next","previous","results","map","p","name","gotoNextPage","gotoPrevPage"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACiBJ,QAAQ,CAAC,EAAD,CADzB;AAAA;AAAA,QACNK,OADM;AAAA,QACGC,UADH;;AAAA,qBAE+BN,QAAQ,CAAC,mCAAD,CAFvC;AAAA;AAAA,QAENO,cAFM;AAAA,QAEUC,iBAFV;;AAAA,qBAGyBR,QAAQ,EAHjC;AAAA;AAAA,QAGNS,WAHM;AAAA,QAGOC,cAHP;;AAAA,qBAIyBV,QAAQ,EAJjC;AAAA;AAAA,QAINW,WAJM;AAAA,QAIOC,cAJP;;AAAA,qBAKiBZ,QAAQ,CAAC,IAAD,CALzB;AAAA;AAAA,QAKNa,OALM;AAAA,QAKGC,UALH;;AAObb,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,UAAU,CAAC,IAAD,CAAV;AACA,QAAIC,MAAJ;AACAZ,IAAAA,KAAK,CAACa,GAAN,CAAUT,cAAV,EAA0B;AACxBU,MAAAA,WAAW,EAAE,IAAId,KAAK,CAACe,WAAV,CAAsBC,CAAC,IAAIJ,MAAM,GAAGI,CAApC;AADW,KAA1B,EAEGC,IAFH,CAEQC,GAAG,IAAI;AACfP,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,MAAAA,cAAc,CAACW,GAAG,CAACC,IAAJ,CAASC,IAAV,CAAd;AACAX,MAAAA,cAAc,CAACS,GAAG,CAACC,IAAJ,CAASE,QAAV,CAAd;AACAlB,MAAAA,UAAU,CAACe,GAAG,CAACC,IAAJ,CAASG,OAAT,CAAiBC,GAAjB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,IAA5B,CAAD,CAAV;AACD,KAPC;AAQF,WAAO,MAAM;AACXb,MAAAA,MAAM;AACP,KAFD;AAIC,GAfQ,EAeN,CAACR,cAAD,CAfM,CAAT,CAPa,CAwBb;;AACA,WAASsB,YAAT,GAAwB;AACtBrB,IAAAA,iBAAiB,CAACC,WAAD,CAAjB;AACD;;AACD,WAASqB,YAAT,GAAwB;AACtBtB,IAAAA,iBAAiB,CAACG,WAAD,CAAjB;AACD;;AAED,MAAIE,OAAJ,EAAa,OAAO,YAAP;AAEb,SACE,oBAAC,WAAD;AAAa,IAAA,OAAO,EAAER,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAGD;;AAED,eAAeD,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PokemonList from './PokemonList';\nimport axios from 'axios';\n\nfunction App() {\n  const [pokemon, setPokemon] = useState([]);\n  const [currentPageUrl, setCurrentPageUrl] = useState('https://pokeapi.co/api/v2/pokemon');\n  const [nextPageUrl, setNextPageUrl] = useState();\n  const [prevPageUrl, setPrevPageUrl] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    let cancel;\n    axios.get(currentPageUrl, {\n      cancelToken: new axios.CancelToken(c => cancel = c)\n    }).then(res => {\n    setLoading(false);\n    setNextPageUrl(res.data.next);\n    setPrevPageUrl(res.data.previous);\n    setPokemon(res.data.results.map(p => p.name));\n  });\n  return () => {\n    cancel();\n  }\n\n  }, [currentPageUrl]);\n\n  //by using the useEffect hook, we tell React to re-run the code inside the function only when the second parameter changes. in our case the currentPageUrl value. You can use an Array for hose values if you wish to rerun based on more than one value.  \n  function gotoNextPage() {\n    setCurrentPageUrl(nextPageUrl);\n  }\n  function gotoPrevPage() {\n    setCurrentPageUrl(prevPageUrl);\n  }\n\n  if (loading) return 'Loading...'\n\n  return (\n    <PokemonList pokemon={pokemon} />\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}